@use './config' as *;

@function get-block-selector($block) {
  @return #{$namespace}#{$block-separator}#{$block};
}

@function selector-to-string($selector) {
  $selector: inspect($selector);
  // $selector: str-slice($selector, 2, -2);
  @return $selector;
}

@function end-with($string, $find) {
  $string: selector-to-string($string);
  $find: selector-to-string($find);

  @if (str-index($string, $find) == (str-length($string) - str-length($find) + 1)) {
    @return true;
  } @else {
    @return false;
  }
}

// 检查选择器中是否包含BEM命名的block块
@function contain-block($selector) {
  $selector: selector-to-string($selector);

  @if str-index($selector, "." + $namespace + $block-separator) {
    @return true;
  } @else {
    @return false;
  }
}

@function contain-element($selector) {
  $selector: selector-to-string($selector);

  @if contain-block($selector) and str-index($selector, $element-separator) {
    @return true;
  } @else {
    @return false;
  }
}

@function contain-modifier($selector) {
  $selector: selector-to-string($selector);

  @if contain-block($selector) and str-index($selector, $modifier-separator) {
    @return true;
  } @else {
    @return false;
  }
}

// @function containWhenFlag($selector) {
//   $selector: selectortostring($selector);

//   @if str-index($selector, "." + $state-prefix) {
//     @return true;
//   } @else {
//     @return false;
//   }
// }

// @function containPseudoClass($selector) {
//   $selector: selectortostring($selector);

//   @if str-index($selector, ":") {
//     @return true;
//   } @else {
//     @return false;
//   }
// }

// @function hitAllSpecialNestRule($selector) {
//   @return contain-modifier($selector) or containWhenFlag($selector) or containPseudoClass($selector);
// }

@function get-side($val, $side) {
  $length: length($val);

  @if $length == 1 {
    @return $val;
  }
  @if $length == 2 {
    @return map-get(
      (
        top: nth($val, 1),
        bottom: nth($val, 1),
        left: nth($val, 2),
        right: nth($val, 2)
      ),
      $side
    );
  }
  @if $length == 3 {
    @return map-get(
      (
        top: nth($val, 1),
        left: nth($val, 2),
        right: nth($val, 2),
        bottom: nth($val, 3)
      ),
      $side
    );
  }
  @if $length == 4 {
    @return map-get(
      (
        top: nth($val, 1),
        right: nth($val, 2),
        bottom: nth($val, 3),
        left: nth($val, 4)
      ),
      $side
    );
  }
}
